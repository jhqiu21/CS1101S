// 2013 Q5 Merging Streams

function merge_stream(s1, s2) {
    if (is_null(s1)) {
        return s2;
    } else if (is_null(s2)) {
        return s1;
    } else {
        return pair(head(s1), () => merge_stream(s2, stream_tail(s1)));
    }
}

let s1 = stream(1, 2, 3);
let s2 = stream(10, 20, 30, 40, 50);

// eval_stream(merge_stream(s1, s2), 8);

let s21 = pair(1, () => s21);
let s22 = pair(2, () => s22);
let s23 = pair(3, () => s23);
let s24 = pair(4, () => s24);

let ms4 = merge_stream(merge_stream(s21, s23), merge_stream(s22, s24));
let ms31 = merge_stream(merge_stream(s21, s23), s22);
let ms32 = merge_stream(merge_stream(s21, s22), s23);
// eval_stream(ms4, 12); // return 1, 2, 3, 4, 1, 2, 3, 4,....

// We cannot merge three streams into one using the method we get 
// stream 1, 2, 3, 4, 1, 2, 3, 4... 
// Because there will be a stream have its elements as output at 
// two times the rate of the other two
 eval_stream(ms31, 12); // rerturn 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3...
// eval_stream(ms32, 24); // return 1, 3, 2, 3, 1, 3, 2, 3....

function merge_list_of_stream(xs) {
    if (is_null(xs)) {
        return null;
    } else if (is_null(head(xs))) {
        return merge_list_of_stream(tail(xs));
    } else {
        return pair(head(head(xs)), () => merge_list_of_stream(
                                            append(tail(xs),
                                                   list(stream_tail(head(xs))))));
    }
}

let x1 = stream(1, 2, 3);
let x2 = stream(11, 22, 33, 44);
let x3 = stream(111, 222, 333, 444, 555);
const ss = merge_list_of_stream(list(x1, x2, x3));
eval_stream(ss, 12);

